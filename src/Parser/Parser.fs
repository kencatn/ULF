// Implementation file for parser generated by fsyacc
module Parser.Parser

open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers



open Parser.Syntax

let parse_error s = printfn "%O" s
exception ParseError of (string * FSharp.Text.Parsing.IParseState)


// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | OUTDENT
  | INDENT
  | BLOCKEND
  | BLOCKBEGIN
  | EQ
  | COLON
  | DARROW
  | ARROW
  | SEMICOLON
  | REFL
  | RECT
  | STAR
  | JEQ
  | SPACE
  | NEWLINE
  | MODULE
  | WHERE
  | PUBLIC
  | OPEN
  | IMPORT
  | COMMA
  | DOT
  | RPAREN
  | LPAREN
  | LAMBDA
  | UNDER_BAR
  | IDENT of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_OUTDENT
    | TOKEN_INDENT
    | TOKEN_BLOCKEND
    | TOKEN_BLOCKBEGIN
    | TOKEN_EQ
    | TOKEN_COLON
    | TOKEN_DARROW
    | TOKEN_ARROW
    | TOKEN_SEMICOLON
    | TOKEN_REFL
    | TOKEN_RECT
    | TOKEN_STAR
    | TOKEN_JEQ
    | TOKEN_SPACE
    | TOKEN_NEWLINE
    | TOKEN_MODULE
    | TOKEN_WHERE
    | TOKEN_PUBLIC
    | TOKEN_OPEN
    | TOKEN_IMPORT
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_LAMBDA
    | TOKEN_UNDER_BAR
    | TOKEN_IDENT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstartSyntax
    | NONTERM__startstart
    | NONTERM__startsyntax
    | NONTERM__startlongIdent
    | NONTERM__startcontextElm
    | NONTERM__startterm
    | NONTERM__startsymbolArgs
    | NONTERM__startsymbolLongIdent
    | NONTERM__startident
    | NONTERM__startsyntaxElm
    | NONTERM__startsyntaxElms
    | NONTERM_start
    | NONTERM_module
    | NONTERM_longIdentOrUnderBar
    | NONTERM_startSyntax
    | NONTERM_syntax
    | NONTERM_syntaxElms
    | NONTERM_syntaxElm
    | NONTERM_expr
    | NONTERM_open
    | NONTERM_openImport
    | NONTERM_context
    | NONTERM_context'
    | NONTERM_contextElm
    | NONTERM_variableIdent
    | NONTERM_term_
    | NONTERM_term
    | NONTERM_termElement_
    | NONTERM_termElement
    | NONTERM_termElementOrParen
    | NONTERM_symbolArgs
    | NONTERM_symbolOrApp
    | NONTERM_app
    | NONTERM_longIdent
    | NONTERM_longIdent'
    | NONTERM_symbolIdent
    | NONTERM_symbolLongIdent
    | NONTERM_pi
    | NONTERM_abs
    | NONTERM_eq
    | NONTERM_refl
    | NONTERM_terms
    | NONTERM_terms'
    | NONTERM_ident
    | NONTERM_symbolIdentOrUnderBar
    | NONTERM_signature_left
    | NONTERM_signature
    | NONTERM_end

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | OUTDENT  -> 1 
  | INDENT  -> 2 
  | BLOCKEND  -> 3 
  | BLOCKBEGIN  -> 4 
  | EQ  -> 5 
  | COLON  -> 6 
  | DARROW  -> 7 
  | ARROW  -> 8 
  | SEMICOLON  -> 9 
  | REFL  -> 10 
  | RECT  -> 11 
  | STAR  -> 12 
  | JEQ  -> 13 
  | SPACE  -> 14 
  | NEWLINE  -> 15 
  | MODULE  -> 16 
  | WHERE  -> 17 
  | PUBLIC  -> 18 
  | OPEN  -> 19 
  | IMPORT  -> 20 
  | COMMA  -> 21 
  | DOT  -> 22 
  | RPAREN  -> 23 
  | LPAREN  -> 24 
  | LAMBDA  -> 25 
  | UNDER_BAR  -> 26 
  | IDENT _ -> 27 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_OUTDENT 
  | 2 -> TOKEN_INDENT 
  | 3 -> TOKEN_BLOCKEND 
  | 4 -> TOKEN_BLOCKBEGIN 
  | 5 -> TOKEN_EQ 
  | 6 -> TOKEN_COLON 
  | 7 -> TOKEN_DARROW 
  | 8 -> TOKEN_ARROW 
  | 9 -> TOKEN_SEMICOLON 
  | 10 -> TOKEN_REFL 
  | 11 -> TOKEN_RECT 
  | 12 -> TOKEN_STAR 
  | 13 -> TOKEN_JEQ 
  | 14 -> TOKEN_SPACE 
  | 15 -> TOKEN_NEWLINE 
  | 16 -> TOKEN_MODULE 
  | 17 -> TOKEN_WHERE 
  | 18 -> TOKEN_PUBLIC 
  | 19 -> TOKEN_OPEN 
  | 20 -> TOKEN_IMPORT 
  | 21 -> TOKEN_COMMA 
  | 22 -> TOKEN_DOT 
  | 23 -> TOKEN_RPAREN 
  | 24 -> TOKEN_LPAREN 
  | 25 -> TOKEN_LAMBDA 
  | 26 -> TOKEN_UNDER_BAR 
  | 27 -> TOKEN_IDENT 
  | 30 -> TOKEN_end_of_input
  | 28 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstartSyntax 
    | 1 -> NONTERM__startstart 
    | 2 -> NONTERM__startsyntax 
    | 3 -> NONTERM__startlongIdent 
    | 4 -> NONTERM__startcontextElm 
    | 5 -> NONTERM__startterm 
    | 6 -> NONTERM__startsymbolArgs 
    | 7 -> NONTERM__startsymbolLongIdent 
    | 8 -> NONTERM__startident 
    | 9 -> NONTERM__startsyntaxElm 
    | 10 -> NONTERM__startsyntaxElms 
    | 11 -> NONTERM_start 
    | 12 -> NONTERM_start 
    | 13 -> NONTERM_module 
    | 14 -> NONTERM_module 
    | 15 -> NONTERM_module 
    | 16 -> NONTERM_longIdentOrUnderBar 
    | 17 -> NONTERM_longIdentOrUnderBar 
    | 18 -> NONTERM_startSyntax 
    | 19 -> NONTERM_syntax 
    | 20 -> NONTERM_syntax 
    | 21 -> NONTERM_syntaxElms 
    | 22 -> NONTERM_syntaxElms 
    | 23 -> NONTERM_syntaxElm 
    | 24 -> NONTERM_syntaxElm 
    | 25 -> NONTERM_syntaxElm 
    | 26 -> NONTERM_syntaxElm 
    | 27 -> NONTERM_expr 
    | 28 -> NONTERM_open 
    | 29 -> NONTERM_open 
    | 30 -> NONTERM_openImport 
    | 31 -> NONTERM_openImport 
    | 32 -> NONTERM_context 
    | 33 -> NONTERM_context 
    | 34 -> NONTERM_context' 
    | 35 -> NONTERM_context' 
    | 36 -> NONTERM_contextElm 
    | 37 -> NONTERM_contextElm 
    | 38 -> NONTERM_variableIdent 
    | 39 -> NONTERM_term_ 
    | 40 -> NONTERM_term_ 
    | 41 -> NONTERM_term_ 
    | 42 -> NONTERM_term_ 
    | 43 -> NONTERM_term_ 
    | 44 -> NONTERM_term_ 
    | 45 -> NONTERM_term 
    | 46 -> NONTERM_term 
    | 47 -> NONTERM_termElement_ 
    | 48 -> NONTERM_termElement_ 
    | 49 -> NONTERM_termElement_ 
    | 50 -> NONTERM_termElement 
    | 51 -> NONTERM_termElementOrParen 
    | 52 -> NONTERM_termElementOrParen 
    | 53 -> NONTERM_symbolArgs 
    | 54 -> NONTERM_symbolArgs 
    | 55 -> NONTERM_symbolOrApp 
    | 56 -> NONTERM_symbolOrApp 
    | 57 -> NONTERM_app 
    | 58 -> NONTERM_app 
    | 59 -> NONTERM_app 
    | 60 -> NONTERM_longIdent 
    | 61 -> NONTERM_longIdent' 
    | 62 -> NONTERM_longIdent' 
    | 63 -> NONTERM_symbolIdent 
    | 64 -> NONTERM_symbolLongIdent 
    | 65 -> NONTERM_pi 
    | 66 -> NONTERM_pi 
    | 67 -> NONTERM_abs 
    | 68 -> NONTERM_abs 
    | 69 -> NONTERM_eq 
    | 70 -> NONTERM_refl 
    | 71 -> NONTERM_terms 
    | 72 -> NONTERM_terms 
    | 73 -> NONTERM_terms' 
    | 74 -> NONTERM_terms' 
    | 75 -> NONTERM_ident 
    | 76 -> NONTERM_symbolIdentOrUnderBar 
    | 77 -> NONTERM_symbolIdentOrUnderBar 
    | 78 -> NONTERM_signature_left 
    | 79 -> NONTERM_signature_left 
    | 80 -> NONTERM_signature 
    | 81 -> NONTERM_signature 
    | 82 -> NONTERM_signature 
    | 83 -> NONTERM_end 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 30 
let _fsyacc_tagOfErrorTerminal = 28

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | OUTDENT  -> "OUTDENT" 
  | INDENT  -> "INDENT" 
  | BLOCKEND  -> "BLOCKEND" 
  | BLOCKBEGIN  -> "BLOCKBEGIN" 
  | EQ  -> "EQ" 
  | COLON  -> "COLON" 
  | DARROW  -> "DARROW" 
  | ARROW  -> "ARROW" 
  | SEMICOLON  -> "SEMICOLON" 
  | REFL  -> "REFL" 
  | RECT  -> "RECT" 
  | STAR  -> "STAR" 
  | JEQ  -> "JEQ" 
  | SPACE  -> "SPACE" 
  | NEWLINE  -> "NEWLINE" 
  | MODULE  -> "MODULE" 
  | WHERE  -> "WHERE" 
  | PUBLIC  -> "PUBLIC" 
  | OPEN  -> "OPEN" 
  | IMPORT  -> "IMPORT" 
  | COMMA  -> "COMMA" 
  | DOT  -> "DOT" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | LAMBDA  -> "LAMBDA" 
  | UNDER_BAR  -> "UNDER_BAR" 
  | IDENT _ -> "IDENT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | OUTDENT  -> (null : System.Object) 
  | INDENT  -> (null : System.Object) 
  | BLOCKEND  -> (null : System.Object) 
  | BLOCKBEGIN  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | DARROW  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | REFL  -> (null : System.Object) 
  | RECT  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | JEQ  -> (null : System.Object) 
  | SPACE  -> (null : System.Object) 
  | NEWLINE  -> (null : System.Object) 
  | MODULE  -> (null : System.Object) 
  | WHERE  -> (null : System.Object) 
  | PUBLIC  -> (null : System.Object) 
  | OPEN  -> (null : System.Object) 
  | IMPORT  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | LAMBDA  -> (null : System.Object) 
  | UNDER_BAR  -> (null : System.Object) 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;0us;65535us;0us;65535us;0us;65535us;0us;65535us;0us;65535us;0us;65535us;0us;65535us;0us;65535us;0us;65535us;0us;65535us;1us;65535us;2us;3us;7us;65535us;0us;43us;2us;22us;4us;43us;18us;43us;20us;43us;30us;43us;41us;43us;1us;65535us;26us;27us;1us;65535us;0us;1us;3us;65535us;0us;37us;4us;5us;30us;31us;5us;65535us;0us;39us;4us;39us;20us;21us;30us;39us;41us;42us;6us;65535us;0us;40us;4us;40us;18us;19us;20us;40us;30us;40us;41us;40us;6us;65535us;0us;45us;4us;45us;18us;45us;20us;45us;30us;45us;41us;45us;6us;65535us;0us;44us;4us;44us;18us;44us;20us;44us;30us;44us;41us;44us;6us;65535us;0us;46us;4us;46us;18us;46us;20us;46us;30us;46us;41us;46us;2us;65535us;27us;28us;131us;132us;3us;65535us;27us;54us;55us;56us;131us;54us;4us;65535us;8us;9us;27us;55us;55us;55us;131us;55us;3us;65535us;57us;58us;109us;110us;113us;114us;17us;65535us;10us;75us;12us;75us;59us;75us;71us;75us;82us;75us;83us;75us;89us;75us;102us;75us;105us;75us;107us;75us;111us;75us;115us;75us;118us;75us;124us;75us;125us;75us;133us;75us;135us;75us;17us;65535us;10us;11us;12us;88us;59us;60us;71us;87us;82us;84us;83us;84us;89us;86us;102us;103us;105us;106us;107us;108us;111us;112us;115us;116us;118us;119us;124us;120us;125us;121us;133us;122us;135us;123us;20us;65535us;10us;80us;12us;80us;59us;80us;69us;80us;70us;80us;71us;80us;76us;80us;82us;80us;83us;80us;89us;80us;102us;80us;105us;80us;107us;80us;111us;80us;115us;80us;118us;80us;124us;80us;125us;80us;133us;80us;135us;80us;20us;65535us;10us;81us;12us;81us;59us;81us;69us;91us;70us;91us;71us;81us;76us;81us;82us;81us;83us;81us;89us;81us;102us;81us;105us;81us;107us;81us;111us;81us;115us;81us;118us;81us;124us;81us;125us;81us;133us;81us;135us;81us;18us;65535us;10us;95us;12us;95us;59us;95us;71us;95us;76us;94us;82us;95us;83us;95us;89us;95us;102us;95us;105us;95us;107us;95us;111us;95us;115us;95us;118us;95us;124us;95us;125us;95us;133us;95us;135us;95us;3us;65535us;12us;13us;71us;73us;89us;90us;17us;65535us;10us;93us;12us;93us;59us;93us;71us;93us;82us;93us;83us;93us;89us;93us;102us;93us;105us;93us;107us;93us;111us;93us;115us;93us;118us;93us;124us;93us;125us;93us;133us;93us;135us;93us;17us;65535us;10us;76us;12us;76us;59us;76us;71us;76us;82us;76us;83us;76us;89us;76us;102us;76us;105us;76us;107us;76us;111us;76us;115us;76us;118us;76us;124us;76us;125us;76us;133us;76us;135us;76us;28us;65535us;6us;7us;10us;69us;12us;69us;14us;101us;26us;35us;48us;49us;51us;52us;57us;64us;59us;69us;69us;79us;70us;79us;71us;69us;76us;79us;82us;69us;83us;70us;89us;69us;102us;69us;105us;69us;107us;69us;109us;64us;111us;69us;113us;64us;115us;69us;118us;69us;124us;69us;125us;69us;133us;69us;135us;69us;29us;65535us;6us;96us;10us;96us;12us;96us;14us;96us;26us;96us;48us;96us;51us;96us;57us;96us;59us;96us;69us;96us;70us;96us;71us;96us;76us;96us;82us;96us;83us;96us;89us;96us;98us;99us;102us;96us;105us;96us;107us;96us;109us;96us;111us;96us;113us;96us;115us;96us;118us;96us;124us;96us;125us;96us;133us;96us;135us;96us;6us;65535us;0us;128us;4us;128us;18us;128us;20us;128us;30us;128us;41us;128us;1us;65535us;14us;15us;17us;65535us;10us;65us;12us;65us;59us;65us;71us;65us;82us;65us;83us;65us;89us;65us;102us;65us;105us;65us;107us;65us;111us;65us;115us;65us;118us;65us;124us;65us;125us;65us;133us;65us;135us;65us;17us;65535us;10us;66us;12us;66us;59us;66us;71us;66us;82us;66us;83us;66us;89us;66us;102us;66us;105us;66us;107us;66us;111us;66us;115us;66us;118us;66us;124us;66us;125us;66us;133us;66us;135us;66us;17us;65535us;10us;67us;12us;67us;59us;67us;71us;67us;82us;67us;83us;67us;89us;67us;102us;67us;105us;67us;107us;67us;111us;67us;115us;67us;118us;67us;124us;67us;125us;67us;133us;67us;135us;67us;17us;65535us;10us;68us;12us;68us;59us;68us;71us;68us;82us;68us;83us;68us;89us;68us;102us;68us;105us;68us;107us;68us;111us;68us;115us;68us;118us;68us;124us;68us;125us;68us;133us;68us;135us;68us;0us;65535us;0us;65535us;36us;65535us;0us;100us;4us;100us;6us;97us;10us;97us;12us;97us;14us;97us;16us;17us;18us;100us;20us;100us;26us;97us;30us;100us;41us;100us;48us;97us;51us;97us;57us;97us;59us;97us;69us;97us;70us;97us;71us;97us;76us;97us;82us;97us;83us;97us;89us;97us;98us;97us;102us;97us;105us;97us;107us;97us;109us;97us;111us;97us;113us;97us;115us;97us;118us;97us;124us;97us;125us;97us;133us;97us;135us;97us;6us;65535us;0us;129us;4us;129us;18us;129us;20us;129us;30us;129us;41us;129us;6us;65535us;0us;131us;4us;131us;18us;131us;20us;131us;30us;131us;41us;131us;6us;65535us;0us;47us;4us;47us;18us;47us;20us;47us;30us;47us;41us;47us;0us;65535us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;2us;3us;4us;5us;6us;7us;8us;9us;10us;11us;13us;21us;23us;25us;29us;35us;42us;49us;56us;63us;66us;70us;75us;79us;97us;115us;136us;157us;176us;180us;198us;216us;245us;275us;282us;284us;302us;320us;338us;356us;357us;358us;395us;402us;409us;416us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;2us;1us;2us;1us;3us;1us;3us;1us;4us;1us;4us;1us;5us;2us;5us;69us;1us;6us;1us;6us;1us;7us;1us;7us;1us;8us;1us;8us;1us;9us;1us;9us;1us;10us;1us;10us;1us;11us;1us;11us;1us;12us;1us;12us;3us;13us;14us;15us;3us;13us;14us;15us;3us;13us;14us;15us;3us;13us;14us;15us;2us;13us;15us;1us;13us;1us;13us;1us;15us;1us;15us;1us;16us;1us;17us;1us;18us;1us;18us;1us;20us;2us;21us;22us;2us;21us;22us;1us;21us;1us;23us;1us;24us;1us;25us;1us;26us;1us;27us;4us;28us;29us;30us;31us;2us;28us;29us;1us;28us;2us;30us;31us;2us;30us;31us;1us;31us;1us;33us;2us;34us;35us;1us;34us;2us;36us;37us;2us;36us;37us;2us;36us;37us;2us;36us;69us;1us;36us;1us;37us;1us;37us;1us;38us;1us;39us;1us;40us;1us;41us;1us;42us;5us;43us;44us;49us;55us;56us;6us;43us;44us;49us;55us;56us;65us;3us;43us;44us;56us;1us;43us;1us;44us;1us;44us;1us;45us;2us;46us;58us;1us;47us;1us;48us;1us;49us;1us;50us;1us;51us;1us;52us;2us;52us;65us;2us;52us;69us;1us;52us;4us;53us;53us;54us;69us;4us;53us;54us;56us;69us;3us;53us;54us;69us;2us;53us;54us;1us;54us;1us;55us;1us;56us;1us;57us;1us;58us;2us;59us;66us;1us;60us;2us;61us;62us;1us;61us;1us;61us;1us;63us;1us;64us;1us;65us;2us;65us;69us;1us;65us;1us;65us;2us;65us;69us;1us;66us;2us;66us;69us;2us;67us;68us;1us;67us;1us;67us;2us;67us;69us;1us;68us;1us;68us;1us;68us;2us;68us;69us;1us;68us;1us;68us;2us;68us;69us;2us;69us;69us;2us;69us;70us;2us;69us;80us;2us;69us;81us;1us;69us;1us;70us;1us;75us;1us;76us;1us;77us;1us;78us;1us;78us;3us;80us;81us;82us;2us;80us;82us;2us;80us;82us;1us;81us;1us;81us;1us;82us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;22us;25us;27us;29us;31us;33us;35us;37us;39us;41us;43us;45us;47us;49us;51us;53us;57us;61us;65us;69us;72us;74us;76us;78us;80us;82us;84us;86us;88us;90us;93us;96us;98us;100us;102us;104us;106us;108us;113us;116us;118us;121us;124us;126us;128us;131us;133us;136us;139us;142us;145us;147us;149us;151us;153us;155us;157us;159us;161us;167us;174us;178us;180us;182us;184us;186us;189us;191us;193us;195us;197us;199us;201us;204us;207us;209us;214us;219us;223us;226us;228us;230us;232us;234us;236us;239us;241us;244us;246us;248us;250us;252us;254us;257us;259us;261us;264us;266us;269us;272us;274us;276us;279us;281us;283us;285us;288us;290us;292us;295us;298us;301us;304us;307us;309us;311us;313us;315us;317us;319us;321us;325us;328us;331us;333us;335us;|]
let _fsyacc_action_rows = 137
let _fsyacc_actionTableElements = [|7us;16403us;7us;16463us;16us;26us;19us;48us;24us;16463us;26us;127us;27us;126us;28us;16463us;0us;49152us;2us;32768us;16us;26us;28us;24us;0us;49152us;7us;16403us;7us;16463us;16us;26us;19us;48us;24us;16463us;26us;127us;27us;126us;28us;16463us;0us;49152us;1us;32768us;27us;126us;0us;49152us;1us;32768us;24us;57us;0us;49152us;6us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;1us;49152us;5us;124us;6us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;0us;49152us;1us;32768us;27us;126us;0us;49152us;1us;32768us;27us;126us;0us;49152us;4us;16463us;16us;26us;19us;48us;26us;127us;27us;126us;0us;49152us;4us;16463us;16us;26us;19us;48us;26us;127us;27us;126us;0us;49152us;1us;32768us;0us;23us;0us;16395us;1us;32768us;0us;25us;0us;16396us;2us;32768us;26us;36us;27us;126us;1us;16416us;24us;57us;1us;32768us;17us;29us;1us;16398us;4us;30us;7us;16403us;7us;16463us;16us;26us;19us;48us;24us;16463us;26us;127us;27us;126us;28us;33us;1us;32768us;3us;32us;0us;16397us;1us;32768us;3us;34us;0us;16399us;0us;16400us;0us;16401us;1us;32768us;0us;38us;0us;16402us;0us;16404us;1us;32768us;9us;41us;7us;16406us;7us;16463us;16us;26us;19us;48us;24us;16463us;26us;127us;27us;126us;28us;16463us;0us;16405us;0us;16407us;0us;16408us;0us;16409us;0us;16410us;0us;16411us;2us;32768us;20us;51us;27us;126us;1us;16413us;18us;50us;0us;16412us;1us;32768us;27us;126us;1us;16414us;18us;53us;0us;16415us;0us;16417us;1us;16419us;24us;57us;0us;16418us;1us;32768us;27us;126us;1us;32768us;6us;59us;7us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;28us;62us;2us;32768us;5us;124us;23us;61us;0us;16420us;1us;32768us;23us;63us;0us;16421us;0us;16422us;0us;16423us;0us;16424us;0us;16425us;0us;16426us;4us;16433us;11us;78us;12us;77us;24us;71us;27us;126us;5us;16433us;6us;102us;11us;78us;12us;77us;24us;71us;27us;126us;7us;32768us;10us;125us;11us;78us;12us;77us;23us;72us;24us;83us;25us;109us;27us;126us;0us;16427us;1us;32768us;23us;74us;0us;16428us;0us;16429us;4us;16430us;11us;78us;12us;77us;24us;82us;27us;126us;0us;16431us;0us;16432us;0us;16433us;0us;16434us;0us;16435us;6us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;6us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;2us;32768us;5us;124us;23us;85us;0us;16436us;2us;16437us;5us;124us;21us;89us;3us;32768us;5us;124us;21us;89us;23us;92us;2us;32768us;5us;124us;21us;89us;6us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;0us;16438us;0us;16439us;0us;16440us;0us;16441us;0us;16442us;1us;16443us;8us;107us;0us;16444us;1us;16446us;22us;98us;1us;32768us;27us;126us;0us;16445us;0us;16447us;0us;16448us;6us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;2us;32768us;5us;124us;23us;104us;1us;32768us;8us;105us;6us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;1us;16449us;5us;124us;6us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;1us;16450us;5us;124us;2us;32768us;24us;113us;27us;126us;1us;32768us;8us;111us;6us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;1us;16451us;5us;124us;1us;32768us;27us;126us;1us;32768us;6us;115us;6us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;2us;32768us;5us;124us;23us;117us;1us;32768us;8us;118us;6us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;1us;16452us;5us;124us;1us;16453us;5us;124us;1us;16454us;5us;124us;1us;16464us;5us;124us;1us;16465us;5us;124us;6us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;6us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;0us;16459us;0us;16460us;0us;16461us;1us;32768us;6us;130us;0us;16462us;2us;16416us;24us;57us;28us;134us;1us;32768us;7us;133us;7us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;28us;136us;1us;32768us;7us;135us;6us;32768us;10us;125us;11us;78us;12us;77us;24us;83us;25us;109us;27us;126us;0us;16466us;|]
let _fsyacc_actionTableRowOffsets = [|0us;8us;9us;12us;13us;21us;22us;24us;25us;27us;28us;35us;37us;44us;45us;47us;48us;50us;51us;56us;57us;62us;63us;65us;66us;68us;69us;72us;74us;76us;78us;86us;88us;89us;91us;92us;93us;94us;96us;97us;98us;100us;108us;109us;110us;111us;112us;113us;114us;117us;119us;120us;122us;124us;125us;126us;128us;129us;131us;133us;141us;144us;145us;147us;148us;149us;150us;151us;152us;153us;158us;164us;172us;173us;175us;176us;177us;182us;183us;184us;185us;186us;187us;194us;201us;204us;205us;208us;212us;215us;222us;223us;224us;225us;226us;227us;229us;230us;232us;234us;235us;236us;237us;244us;247us;249us;256us;258us;265us;267us;270us;272us;279us;281us;283us;285us;292us;295us;297us;304us;306us;308us;310us;312us;314us;321us;328us;329us;330us;331us;333us;334us;337us;339us;347us;349us;356us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;2us;2us;7us;4us;7us;1us;1us;2us;0us;1us;3us;2us;1us;1us;1us;1us;1us;3us;2us;3us;4us;0us;1us;2us;1us;5us;5us;1us;1us;1us;1us;1us;3us;4us;1us;1us;1us;1us;1us;1us;1us;3us;3us;3us;2us;4us;1us;2us;1us;1us;3us;1us;1us;1us;7us;3us;4us;8us;3us;2us;0us;1us;2us;1us;1us;1us;1us;2us;0us;4us;4us;4us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;3us;4us;5us;6us;7us;8us;9us;10us;11us;11us;12us;12us;12us;13us;13us;14us;15us;15us;16us;16us;17us;17us;17us;17us;18us;19us;19us;20us;20us;21us;21us;22us;22us;23us;23us;24us;25us;25us;25us;25us;25us;25us;26us;26us;27us;27us;27us;28us;29us;29us;30us;30us;31us;31us;32us;32us;32us;33us;34us;34us;35us;36us;37us;37us;38us;38us;39us;40us;41us;41us;42us;42us;43us;44us;44us;45us;45us;46us;46us;46us;47us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;49152us;65535us;49152us;65535us;49152us;65535us;49152us;65535us;65535us;65535us;49152us;65535us;49152us;65535us;49152us;65535us;49152us;65535us;49152us;65535us;16395us;65535us;16396us;65535us;65535us;65535us;65535us;65535us;65535us;16397us;65535us;16399us;16400us;16401us;65535us;16402us;16404us;65535us;65535us;16405us;16407us;16408us;16409us;16410us;16411us;65535us;65535us;16412us;65535us;65535us;16415us;16417us;65535us;16418us;65535us;65535us;65535us;65535us;16420us;65535us;16421us;16422us;16423us;16424us;16425us;16426us;65535us;65535us;65535us;16427us;65535us;16428us;16429us;65535us;16431us;16432us;16433us;16434us;16435us;65535us;65535us;65535us;16436us;65535us;65535us;65535us;65535us;16438us;16439us;16440us;16441us;16442us;65535us;16444us;65535us;65535us;16445us;16447us;16448us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16459us;16460us;16461us;65535us;16462us;65535us;65535us;65535us;65535us;65535us;16466us;|]
let _fsyacc_reductions = lazy [|

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstartSyntax));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynModule in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startsyntax));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynLongIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startlongIdent));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ContextElement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startcontextElm));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynPreTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startterm));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynPreTerm list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startsymbolArgs));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynSymbolIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startsymbolLongIdent));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startident));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SyntaxElement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startsyntaxElm));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SyntaxElement list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startsyntaxElms));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_module in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                       _1
                   )

                 : SynModule));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                      raise (ParseError ("startError", parseState))
                   )

                 : SynModule));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_longIdentOrUnderBar in
            let _3 = parseState.GetInput(3) :?> 'gentype_context in
            let _6 = parseState.GetInput(6) :?> Syntax in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                                                                {
                                 moduleName = _2
                                 context = _3
                                 syntax = _6
                                 range = parseState.ResultRange
                             }
                   )

                 : 'gentype_module));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_longIdentOrUnderBar in
            let _3 = parseState.GetInput(3) :?> 'gentype_context in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                                     {
                             moduleName = _2
                             context = _3
                             syntax = {
                                 syntax = []
                             }
                             range = parseState.ResultRange
                         }
                   )

                 : 'gentype_module));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_longIdentOrUnderBar in
            let _3 = parseState.GetInput(3) :?> 'gentype_context in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                                                               raise (ParseError ("module_syntax", parseState))
                   )

                 : 'gentype_module));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynLongIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                      Some _1
                   )

                 : 'gentype_longIdentOrUnderBar));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                      None
                   )

                 : 'gentype_longIdentOrUnderBar));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                       _1
                   )

                 : Syntax));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                            {syntax = []}
                   )

                 : Syntax));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SyntaxElement list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                       {
                             syntax = _1
                         }
                   )

                 : Syntax));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SyntaxElement in
            let _3 = parseState.GetInput(3) :?> SyntaxElement list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                           _1::_3
                   )

                 : SyntaxElement list));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SyntaxElement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                [_1]
                   )

                 : SyntaxElement list));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_module in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                   {
                                 syntaxElement = (Module _1)
                                 range = parseState.ResultRange
                             }
                   )

                 : SyntaxElement));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_open in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                 {
                             syntaxElement = (Open _1)
                             range = parseState.ResultRange}
                   )

                 : SyntaxElement));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                 {
                             syntaxElement = (Expr _1)
                             range = parseState.ResultRange}
                   )

                 : SyntaxElement));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_openImport in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                       {
                             syntaxElement = _1
                             range = parseState.ResultRange}
                   )

                 : SyntaxElement));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_signature in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                      {
                             expr = _1
                             range = parseState.ResultRange
                         }
                   )

                 : 'gentype_expr));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> SynLongIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                  {
                             public' = true
                             openIdent = _2
                             range = parseState.ResultRange}
                   )

                 : 'gentype_open));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> SynLongIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                           {
                             public' = false
                             openIdent = _2
                             range = parseState.ResultRange}
                   )

                 : 'gentype_open));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> SynLongIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                  Open {
                             public' = false
                             openIdent = _3
                             range = parseState.ResultRange}
                   )

                 : 'gentype_openImport));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> SynLongIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                         Open {
                             public' = true
                             openIdent = _3
                             range = parseState.ResultRange
                         }
                   )

                 : 'gentype_openImport));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                            {
                             preContext = []
                             range = parseState.ResultRange
                         }
                   )

                 : 'gentype_context));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_context' in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                     {
                             preContext = _1
                             range = parseState.ResultRange
                         }
                   )

                 : 'gentype_context));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ContextElement in
            let _2 = parseState.GetInput(2) :?> 'gentype_context' in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                _1::_2
                   )

                 : 'gentype_context'));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ContextElement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                       [_1]
                   )

                 : 'gentype_context'));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_variableIdent in
            let _4 = parseState.GetInput(4) :?> SynPreTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                                   {
                             variable = _2
                             preTerm = _4
                             range = parseState.ResultRange
                         }
                   )

                 : ContextElement));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_variableIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                                    raise (ParseError("contextElm_term", parseState))
                   )

                 : ContextElement));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynLongIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                      {
                             variableIdent = _1
                             range = parseState.ResultRange
                         }
                   )

                 : 'gentype_variableIdent));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pi in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                               Pi _1
                   )

                 : 'gentype_term_));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_abs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                Abs _1
                   )

                 : 'gentype_term_));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_eq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                               Eq _1
                   )

                 : 'gentype_term_));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_refl in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                 Refl _1
                   )

                 : 'gentype_term_));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynLongIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                    Symbol (_1, [])
                   )

                 : 'gentype_term_));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynLongIdent in
            let _3 = parseState.GetInput(3) :?> SynPreTerm list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                               Symbol (_1, _3)
                   )

                 : 'gentype_term_));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term_ in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                  {
                             preTerm = _1
                             range = parseState.ResultRange}
                   )

                 : SynPreTerm));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_app in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                _1
                   )

                 : SynPreTerm));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                 Star
                   )

                 : 'gentype_termElement_));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                 Rect
                   )

                 : 'gentype_termElement_));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynLongIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                      SymbolOrVariable _1
                   )

                 : 'gentype_termElement_));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_termElement_ in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                         {
                             preTerm = _1
                             range = parseState.ResultRange
                         }
                   )

                 : 'gentype_termElement));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_termElement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                        _1
                   )

                 : 'gentype_termElementOrParen));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> SynPreTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                               _2
                   )

                 : 'gentype_termElementOrParen));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynPreTerm in
            let _3 = parseState.GetInput(3) :?> SynPreTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                            [_1; _3]
                   )

                 : SynPreTerm list));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynPreTerm in
            let _3 = parseState.GetInput(3) :?> SynPreTerm list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                  _1::_3
                   )

                 : SynPreTerm list));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynLongIdent in
            let _2 = parseState.GetInput(2) :?> 'gentype_termElement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                  {
                             preTerm = SymbolOrApp (_1, _2)
                             range = parseState.ResultRange}
                   )

                 : 'gentype_symbolOrApp));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynLongIdent in
            let _3 = parseState.GetInput(3) :?> SynPreTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                         {
                             preTerm = SymbolOrApp (_1, _3)
                             range = parseState.ResultRange}
                   )

                 : 'gentype_symbolOrApp));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_symbolOrApp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                        _1
                   )

                 : 'gentype_app));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_app in
            let _2 = parseState.GetInput(2) :?> 'gentype_termElementOrParen in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                   {
                             preTerm = 
                                 App (None, None, None, 
                                     _1
                                     , _2)
                             range = parseState.ResultRange}
                   )

                 : 'gentype_app));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_termElementOrParen in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                               _1
                   )

                 : 'gentype_app));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_longIdent' in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                            SynLongIdent (_1, [])
                   )

                 : SynLongIdent));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynIdent in
            let _3 = parseState.GetInput(3) :?> 'gentype_longIdent' in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                 _1::_3
                   )

                 : 'gentype_longIdent'));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                  [_1]
                   )

                 : 'gentype_longIdent'));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                  {
                             symbolIdent = SynLongIdent ([_1], [])
                             range = parseState.ResultRange
                         }
                   )

                 : 'gentype_symbolIdent));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynLongIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                      {
                             symbolIdent = _1
                             range = parseState.ResultRange}
                   )

                 : SynSymbolIdent));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> SynLongIdent in
            let _4 = parseState.GetInput(4) :?> SynPreTerm in
            let _7 = parseState.GetInput(7) :?> SynPreTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                                          
                             (_4, Some _2, _7)
                         
                   )

                 : 'gentype_pi));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_termElementOrParen in
            let _3 = parseState.GetInput(3) :?> SynPreTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                          
                             (_1, None, _3)
                         
                   )

                 : 'gentype_pi));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_variableIdent in
            let _4 = parseState.GetInput(4) :?> SynPreTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                            
                             (None, _2, _4)
                         
                   )

                 : 'gentype_abs));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_variableIdent in
            let _5 = parseState.GetInput(5) :?> SynPreTerm in
            let _8 = parseState.GetInput(8) :?> SynPreTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                                                     
                             (Some _5, _3, _8)
                         
                   )

                 : 'gentype_abs));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynPreTerm in
            let _3 = parseState.GetInput(3) :?> SynPreTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                         
                             ((None, _1, _3))
                         
                   )

                 : 'gentype_eq));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> SynPreTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                      _2
                   )

                 : 'gentype_refl));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                            []
                   )

                 : 'gentype_terms));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_terms' in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                   _1
                   )

                 : 'gentype_terms));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynPreTerm in
            let _2 = parseState.GetInput(2) :?> 'gentype_terms' in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                        _1::_2
                   )

                 : 'gentype_terms'));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SynPreTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                 [_1]
                   )

                 : 'gentype_terms'));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                  {
                             str = _1
                             range = parseState.ResultRange
                         }
                   )

                 : SynIdent));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                      None
                   )

                 : 'gentype_symbolIdentOrUnderBar));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_symbolIdent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                        Some _1
                   )

                 : 'gentype_symbolIdentOrUnderBar));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_symbolIdentOrUnderBar in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                        _1
                   )

                 : 'gentype_signature_left));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                            None
                   )

                 : 'gentype_signature_left));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_signature_left in
            let _2 = parseState.GetInput(2) :?> 'gentype_context in
            let _4 = parseState.GetInput(4) :?> SynPreTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                               Signature (_1, _2, _4, parseState.ResultRange)
                   )

                 : 'gentype_signature));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_signature_left in
            let _4 = parseState.GetInput(4) :?> SynPreTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                             
                             printfn "%O" _4
                             raise (ParseError ("signature_context", parseState))
                         
                   )

                 : 'gentype_signature));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_signature_left in
            let _2 = parseState.GetInput(2) :?> 'gentype_context in
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                                                
                             raise (ParseError ("signature_term", parseState))
                         
                   )

                 : 'gentype_signature));

        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (

                                3 
                   )

                 : 'gentype_end));
|]

let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 31;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let startSyntax lexer lexbuf : Syntax =
    engine lexer lexbuf 0 :?> _
let start lexer lexbuf : SynModule =
    engine lexer lexbuf 2 :?> _
let syntax lexer lexbuf : Syntax =
    engine lexer lexbuf 4 :?> _
let longIdent lexer lexbuf : SynLongIdent =
    engine lexer lexbuf 6 :?> _
let contextElm lexer lexbuf : ContextElement =
    engine lexer lexbuf 8 :?> _
let term lexer lexbuf : SynPreTerm =
    engine lexer lexbuf 10 :?> _
let symbolArgs lexer lexbuf : SynPreTerm list =
    engine lexer lexbuf 12 :?> _
let symbolLongIdent lexer lexbuf : SynSymbolIdent =
    engine lexer lexbuf 14 :?> _
let ident lexer lexbuf : SynIdent =
    engine lexer lexbuf 16 :?> _
let syntaxElm lexer lexbuf : SyntaxElement =
    engine lexer lexbuf 18 :?> _
let syntaxElms lexer lexbuf : SyntaxElement list =
    engine lexer lexbuf 20 :?> _
