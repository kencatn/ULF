{

// Opens methods related to fslex.exe
open FSharp.Text.Lexing

let newline (lexbuf: LexBuffer<_>) =
  lexbuf.EndPos <- lexbuf.EndPos.NextLine
let lexeme = LexBuffer<_>.LexemeString
open Parser.Parser
open Parser.LexHelper
let keywords =
    [
        "_", UNDER_BAR;
        "\\", LAMBDA;
        "lambda", LAMBDA;
        "open", OPEN;
        "import", IMPORT;
        "module", MODULE;
        "public", PUBLIC;
        "refl_", REFL;
    ] |> Map.ofList
}
// Regular expressions
let whitespace = [' ']
let newline = ('\n' | '\r' | "\r\n")
let identChar = [^'\n' '\r' '\n' ' ' '\t' '.' '(' ')' '=' ':' ',' '⇒' '→' 'λ' '.' '{' '}' ';']
let identHead = [^'\n' '\r' '\n' ' ' '\t' '.' '(' ')' '=' ':' ',' '⇒' '→' 'λ' '.' '{' '}' ';']
let identTail = [^'\n' '\r' '\n' ' ' '\t' '.' '(' ')' '=' ':' ',' '⇒' '→' 'λ' '.' '{' '}' ';']
let ident = identHead | (identHead identChar* identTail)
let never = 'a'+'a'
let anyZero = never?
let newlineWhitespaces = newline whitespace*
rule start (state : LexState) = parse
  | anyZero {
      match state.tokens with
      | [] -> 
        if state.eof then
          failwith "eof"
        else
          tokenstream state lexbuf
      | x::xs ->
        x, {state with tokens = xs}
    }
and tokenstream state = parse
  // --------------------------
  | "." {Lex.token Parser.DOT state lexbuf}
  // --------------------------
  | "(" {Lex.token LPAREN state lexbuf}
  | ")" {Lex.token RPAREN state lexbuf}
  | "=" {Lex.token EQ state lexbuf}
  | ":" {Lex.token COLON state lexbuf}
  | ";" {Lex.token SEMICOLON state lexbuf}
  | "," {Lex.token COMMA state lexbuf}
  | "→" {Lex.token ARROW state lexbuf}
  | "⇒" {Lex.token DARROW state lexbuf}
  | "=>" {Lex.token DARROW state lexbuf}
  | "->" {Lex.token ARROW state lexbuf}
  | "λ" {Lex.token LAMBDA state lexbuf}
  | "." {Lex.token DOT state lexbuf}
  | "*" {Lex.token STAR state lexbuf}
  | "∗" {Lex.token STAR state lexbuf}
  | "□" {Lex.token RECT state lexbuf}
  | "{" {Lex.token BLOCKBEGIN state lexbuf}
  | "}" {Lex.token BLOCKEND state lexbuf}
  | "where" {
    start {
      state with
        acceptIndent = true
        tokens = [WHERE, (lexbuf.StartPos, lexbuf.EndPos)]
    } lexbuf}
  | whitespace	{
    start state lexbuf} 
  | newlineWhitespaces* newline	whitespace* { 
    let ls = (lexeme lexbuf).Split("\n")
    for _ in ls do
      newline lexbuf
    let depth = ls.[ls.Length-1].Length
    let rec loop i indents =
      match indents with
      | [] -> i, []
      | x::xs -> 
        if depth < x then
          loop (i+1) xs
        else
          i, indents
    if state.acceptIndent then
      let state = {
        state with
          acceptIndent = false
      }
      match state.indents with
      | x::xs ->
        if depth > x then
          start 
            {state with
              indents = depth::state.indents
              tokens = [BLOCKBEGIN, (lexbuf.EndPos, lexbuf.EndPos)]
            } 
            lexbuf
        else
          let (i, ls) = loop 1 xs
          start 
            {
              state with  
                indents = ls
                tokens = List.replicate i (BLOCKEND, (lexbuf.EndPos, lexbuf.EndPos))
            } 
            lexbuf 
      | [] ->
        start 
          {state with
            indents = [depth]
            tokens = [BLOCKBEGIN, (lexbuf.EndPos, lexbuf.EndPos)]
          } 
          lexbuf
    else
      let (i, ls) = loop 0 state.indents
      start 
        {state with
          indents = ls
          tokens = 
            [
              SEMICOLON, (lexbuf.EndPos, lexbuf.EndPos)
              for _ in 1..i do
                BLOCKEND, (lexbuf.EndPos, lexbuf.EndPos)
            ]
        } 
        lexbuf }
  | ident {
    match keywords.TryFind(lexeme lexbuf) with
    | Some(token) -> Lex.token token state lexbuf
    | None -> Lex.token (IDENT(lexeme lexbuf)) state lexbuf
  }
  // --------------------------
  | _    		{ 
      failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }
  | newlineWhitespaces* eof   	{ 
    start
      {
        state with
          eof = true
          tokens = [
            SEMICOLON, (lexbuf.EndPos, lexbuf.EndPos)
            for _ in state.indents do
              BLOCKEND, (lexbuf.EndPos, lexbuf.EndPos)
            EOF, (lexbuf.EndPos, lexbuf.EndPos)
          ]}
      lexbuf
  }